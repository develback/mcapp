{"version":3,"file":"ionic3-star-rating-component.js","sourceRoot":"","sources":["../../src/components/ionic3-star-rating-component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { Events } from 'ionic-angular'\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nconst HTML_TEMPLATE = `\r\n<div class=\"ionic3-star-rating\">\r\n  <button [ngStyle]=\"{'width' : fontSize, 'height' : fontSize}\" *ngFor=\"let index of iconsArray\" id=\"{{index}}\" type=\"button\" ion-button icon-only (click)=\"changeRating($event)\">\r\n    <ion-icon [ngStyle]=\"{'color':index < this.Math.round(this.parseFloat(rating)) ? activeColor : defaultColor, 'font-size' : fontSize }\" name=\"{{(halfStar ==='true' && (rating - index > 0) && (rating - index <= 0.5)) ? halfIcon : (index < this.Math.round(this.parseFloat(rating))) ? activeIcon : defaultIcon}}\"></ion-icon>\r\n  </button>\r\n</div>\r\n`\r\n\r\nconst CSS_STYLE = `\r\n    .ionic3-star-rating .button {\r\n        background: none;\r\n        box-shadow: none;\r\n        -webkit-box-shadow: none;\r\n    }\r\n`\r\n\r\n@Component({\r\n  selector: 'ionic3-star-rating',\r\n  template: HTML_TEMPLATE,\r\n  styles: [CSS_STYLE],\r\n  providers: [\r\n    {\r\n        provide: NG_VALUE_ACCESSOR,\r\n        useExisting: StarRating,\r\n        multi: true\r\n    }\r\n]\r\n})\r\nexport class StarRating implements ControlValueAccessor, OnInit{\r\n\r\n  ngOnInit(): void {\r\n    this.rating = this.rating || 3; //default after input`s initialization\r\n    for(var i=0; i < this.maxRating; i++) {\r\n      this.iconsArray.push(i);\r\n    }\r\n  }\r\n\r\n  public readonly eventInfo = (()=>{\r\n    const id =new Date().getTime();\r\n    const topic = `star-rating:${id}:changed`;\r\n    return { \r\n      topic \r\n    }\r\n  })();\r\n\r\n  private _rating : number;\r\n  private onChange : any;\r\n  private onTouched : any;\r\n  public disabled : boolean;\r\n\r\n  writeValue(obj: number): void {\r\n    this.rating = obj;\r\n  }\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n  setDisabledState?(isDisabled: boolean): void {\r\n    this.readonly = isDisabled ? \"true\" : \"false\";\r\n  }\r\n\r\n  @Input() public set rating(val : number){\r\n    this._rating = val;\r\n    // for form\r\n    if(this.onChange){\r\n      this.onChange(val);\r\n    }\r\n  }\r\n\r\n  public get rating(): number{\r\n    return this._rating;\r\n  }\r\n  \r\n  @Output()\r\n  ratingChanged : EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  @Input()\r\n  readonly: string = \"false\";\r\n  @Input()\r\n  activeColor : string = '#488aff';\r\n  @Input()\r\n  defaultColor : string = '#aaaaaa';\r\n  @Input()\r\n  activeIcon : string = 'ios-star';\r\n  @Input()\r\n  defaultIcon : string = 'ios-star-outline';\r\n  @Input()\r\n  halfIcon : string = 'ios-star-half';\r\n  @Input()\r\n  halfStar : string = \"false\";\r\n  @Input()\r\n  maxRating : number = 5;\r\n  @Input()\r\n  fontSize : string = '28px';\r\n  Math: any;\r\n  parseFloat : any;\r\n  iconsArray : number[] = [];\r\n\r\n  constructor(private events : Events) {\r\n    this.Math = Math;\r\n    this.parseFloat = parseFloat;\r\n  }\r\n\r\n  changeRating(event){\r\n\r\n    if(this.readonly && this.readonly === \"true\") return;\r\n    // event is different for firefox and chrome\r\n    let id = event.target.id ? parseInt(event.target.id) : parseInt(event.target.parentElement.id);\r\n    if(this.halfStar && this.halfStar === \"true\") {\r\n      this.rating = ((this.rating - id > 0) && (this.rating - id <= 0.5)) ? id + 1 : id + .5;\r\n    } else {\r\n      this.rating = id + 1;\r\n    }\r\n    \r\n    // subscribe this event to get the changed value in your parent compoanent \r\n    this.events.publish(`star-rating:changed`, this.rating); //common event for all instances included for backwards compatibility\r\n    this.events.publish(this.eventInfo.topic, this.rating); //common event for all instances\r\n    // unique event\r\n    this.ratingChanged.emit(this.rating)\r\n  }\r\n\r\n}"]}